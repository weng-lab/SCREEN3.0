/* eslint-disable */
import * as types from './graphql';
import { TypedDocumentNode as DocumentNode } from '@graphql-typed-document-node/core';

/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n": typeof types.EntexQueryDocument,
    "\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}": typeof types.EntexActiveAnnotationsQueryDocument,
    "\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n": typeof types.OrthologTabDocument,
    "\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n": typeof types.FunctionalCharacterizationQueryDocument,
    "\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n": typeof types.Mpra_FccDocument,
    "\n  query crisprFccQuery($accession: [String]!) {\n    crisprFccQuery(accession: $accession) {\n      rdhs\n      log2fc\n      fdr      \n      pvalue\n      experiment\n    }\n  }\n": typeof types.CrisprFccQueryDocument,
    "\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n": typeof types.CapraFccSoloQueryDocument,
    "\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n": typeof types.CapraFccDoubleQueryDocument,
    "\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n": typeof types.RdhsDocument,
    "\n  query BiosampleUmap($assembly: String!, $assay: String!) {\n    ccREBiosampleQuery(assay: [$assay], assembly: $assembly) {\n      biosamples {\n        name\n        umap_coordinates(assay: $assay)\n      }\n    }\n  }\n": typeof types.BiosampleUmapDocument,
    "\n  query cCRETF($accession: String!, $assembly: String!) {\n    getcCRETFQuery(accession: $accession, assembly: $assembly) {\n      celltype\n      tf\n    }\n  }\n": typeof types.CCretfDocument,
    "\n  query biosampleZScores($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        id: name  # Add a unique identifier for each biosample\n        sampleType\n        displayname\n        lifeStage\n        cCREZScores(accession: $accession) @nonreactive {  # Mark this field as non-reactive to prevent unnecessary re-renders\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n  }\n": typeof types.BiosampleZScoresDocument,
    "\n  query CtAgnostic($accession: [String!], $assembly: String!) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      id: accession  # Add a unique identifier for the cCRE\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n": typeof types.CtAgnosticDocument,
    "\n  query nearbyGenes(\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n": typeof types.NearbyGenesDocument,
    "\n  query geneOrtholog($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n": typeof types.GeneOrthologDocument,
    "\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }\n": typeof types.GetSnPsforgivengwasStudyDocument,
    "\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n": typeof types.CcreSearchQuery_1Document,
    "\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n": typeof types.Q_4Document,
    "\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n": typeof types.RnaSeqQueryDocument,
    "\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n": typeof types.Biosamples_1Document,
    "\nquery getimmuneeQTLsQuery($genes: [String], $snps: [String],$ccre: [String]) {\n  immuneeQTLsQuery(genes: $genes, snps: $snps, ccre: $ccre) {\n    rsid\n    genename\n    study\n    fdr\n    celltype\n    ref\n    chromosome\n    position\n    alt\n    variant_id    \n    pval_nominal\n    ccre\n    slope\n    spearmans_rho\n  }\n} \n": typeof types.GetimmuneeQtLsQueryDocument,
    "\n  query fetchRNASeqData($assembly: String!, $biosample: [String]) {\n    rnaSeqQuery(assembly: $assembly, biosample: $biosample) {\n      expid\n      biosample\n      posfileid\n      negfileid\n      unstrandedfileid\n    }\n  }\n": typeof types.FetchRnaSeqDataDocument,
    "\n  query cCRE_1(\n    $assembly: String!\n    $accession: [String!]\n    $experiments: [String!]\n  ) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n": typeof types.CCre_1Document,
    "\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n": typeof types.CCre_2Document,
    "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n    \n  }\n}": typeof types.CCreAutocompleteQueryDocument,
    "\n  query cCRESCREENSearchQuery(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $nearbygeneslimit: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      coordinates: $coordinates\n      cellType: $cellType\n      nearbygeneslimit: $nearbygeneslimit\n    ) {\n      chrom\n      start\n      len\n      pct\n      info {\n        accession\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      nearestgenes {\n        gene        \n        distance\n      }\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }  \n    }\n  }\n": typeof types.CCrescreenSearchQueryDocument,
    "\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n": typeof types.BigRequestsDocument,
    "\n   query ccreSearchQuery_2(\n    $assembly: String!    \n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions      \n      nearbygeneslimit: 3\n    ) {\n      \n      nearestgenes {\n        gene        \n        distance\n      }\n    }\n  }\n": typeof types.CcreSearchQuery_2Document,
    "   \nquery geneDataQuery($assembly: String!,$name: [String], $version: Int) {\n    gene(assembly: $assembly, name: $name, version: $version) {\n      name\n      id\n        gene_type\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  }  \n \n": typeof types.GeneDataQueryDocument,
    "\n  query ComputationalGeneLinks($accession: [String]!, $method: [String]){\n    ComputationalGeneLinksQuery(accession: $accession, method: $method){\n      genename\n      accession\n      geneid\n      genetype\n      method\n      celltype\n      score\n      methodregion\n      fileaccession\n    }\n  }\n": typeof types.ComputationalGeneLinksDocument,
    "\n  query GetcCreBiosampleMetadataQuery($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        ontology\n        lifeStage      \n        sampleType\n        displayname\n        __typename\n      }\n      __typename\n    }\n  }": typeof types.GetcCreBiosampleMetadataQueryDocument,
    "\n  query getGWASCTEnrichmentQuery($study: String!) {\n  getGWASCtEnrichmentQuery(study: $study) {\n    celltype\n    accession\n    fc\n    fdr\n    pvalue\n    __typename\n  }\n}": typeof types.GetGwasctEnrichmentQueryDocument,
    "\nquery getimmuneGWASLdr($icres: [String], $snps: [String]) {\n    immuneGWASLdrQuery(snps: $snps, icres: $icres) {\n      snp_chr\n      snp_end\n      snp_start\n      snpid\n      icre\n      ref_allele\n      author\n      effect_allele\n      zscore\n      study_source\n      disease\n      icre_chr\n      icre_start\n      icre_end\n      icre_class\n      study\n      study_link\n    }\n  }": typeof types.GetimmuneGwasLdrDocument,
    "\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }": typeof types.GetSnPsforgivengwasStudyDocument,
    "\n    query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!, $maxOutputLength: Int) {\n      intersection (\n        userCcres: $inp,\n        assembly: $assembly,\n        maxOutputLength: $maxOutputLength\n      )\n    }\n  ": typeof types.BedIntersectCcreDocument,
    "\n    query linkedGenesQuery(\n      $assembly: String!\n      $accessions: [String]!\n      $methods: [String]\n      $celltypes: [String]\n    ) {\n      linkedGenesQuery(\n        assembly: $assembly\n        accession: $accessions\n        method: $methods\n        celltype: $celltypes\n      ) {\n        p_val\n        gene\n        geneid\n        genetype\n        method\n        accession\n        grnaid\n        effectsize\n        assay\n        celltype\n        experiment_accession\n        tissue\n        score\n        variantid\n        source\n        slope\n        tissue\n        displayname\n      }\n    }\n  ": typeof types.LinkedGenesQueryDocument,
    "\n  query getGWASStudies($study: [String]){  \n    getAllGwasStudies(study: $study)  \n    {        \n        study\n        studyname\n        totalldblocks\n        author\n        pubmedid\n    }\n}\n": typeof types.GetGwasStudiesDocument,
    "\n  query Gene($chromosome: String, $start: Int, $end: Int, $name: [String], $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version, name: $name) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        end\n        start\n      }\n        transcripts {\n      coordinates {\n        chromosome\n        end\n        start\n      }\n      id\n      name\n      strand\n    }\n    }\n  }\n": typeof types.GeneDocument,
    "\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n ": typeof types.GeneexpressionDocument,
    "\n  query IcresZscores($accession: [String]!) {\n    immuneiCREsUmapQuery(accession: $accession) {\n      source\n      study\n      link\n      lineage\n      celltype\n      biosample\n      biosampleid\n      celltype_stim\n      stimulation\n      celltype_stim_order\n      biosample_order\n      name\n      expid\n      assay\n      value\n      umap_1\n      umap_2\n      umap_atac_1\n      umap_atac_2\n      umap_dnase_1\n      umap_dnase_2\n      accession\n    }\n  }\n": typeof types.IcresZscoresDocument,
    "\n  query linkedGenes(\n    $assembly: String!  \n    $accessions: [String!]!    \n\n  ) {\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      tissue\n      displayname\n    }\n  }\n": typeof types.LinkedGenesDocument,
    "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession    \n    isiCRE    \n  }\n}": typeof types.CCreAutocompleteQueryDocument,
    "\nquery LinkedcCREs($geneid: [String!]!, $assembly: String!) {\n  linkedcCREs: linkedcCREsQuery(assembly: $assembly, geneid: $geneid) {\n    accession\n    p_val\n    gene\n    geneid\n    genetype\n    method\n    grnaid\n    effectsize\n    assay\n    celltype\n    experiment_accession\n    tissue\n    variantid\n    source\n    slope\n    score\n    displayname\n    __typename\n  }\n}\n  ": typeof types.LinkedcCrEsDocument,
    "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n\n  }\n}": typeof types.CCreAutocompleteQueryDocument,
    "\nquery getclosestGenetocCRE($geneid: [String],$ccre: [String]) {\n  closestGenetocCRE(geneid: $geneid,ccre: $ccre) {\n     gene {\n      chromosome\n      stop\n      start\n      name\n      type\n    }\n    ccre\n    chromosome\n    stop\n    start\n  }\n}\n  ": typeof types.GetclosestGenetocCreDocument,
    "\n    query cCREQuery(\n      $assembly: String!\n      $coordinates: [GenomicRangeInput]\n    ) {\n      cCRESCREENSearch(\n        assembly: $assembly\n        coordinates: $coordinates\n      ) {\n        chrom\n        start\n        len\n        pct\n        info {\n          accession\n        }\n        ctcf_zscore\n        dnase_zscore\n        enhancer_zscore\n        promoter_zscore\n        atac_zscore\n        nearestgenes {\n          gene        \n          distance\n        }\n        ctspecific {\n          ct\n          dnase_zscore\n          h3k4me3_zscore\n          h3k27ac_zscore\n          ctcf_zscore\n          atac_zscore\n        }  \n      }\n    }\n  ": typeof types.CCreQueryDocument,
    "\n  query Snp($snpids: [String], $coordinates: [GenomicRangeInput], $assembly: String!) {\n    snpQuery(assembly: $assembly, snpids: $snpids, coordinates: $coordinates) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n": typeof types.SnpDocument,
    "\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}": typeof types.TssRampageDocument,
};
const documents: Documents = {
    "\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n": types.EntexQueryDocument,
    "\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}": types.EntexActiveAnnotationsQueryDocument,
    "\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n": types.OrthologTabDocument,
    "\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n": types.FunctionalCharacterizationQueryDocument,
    "\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n": types.Mpra_FccDocument,
    "\n  query crisprFccQuery($accession: [String]!) {\n    crisprFccQuery(accession: $accession) {\n      rdhs\n      log2fc\n      fdr      \n      pvalue\n      experiment\n    }\n  }\n": types.CrisprFccQueryDocument,
    "\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n": types.CapraFccSoloQueryDocument,
    "\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n": types.CapraFccDoubleQueryDocument,
    "\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n": types.RdhsDocument,
    "\n  query BiosampleUmap($assembly: String!, $assay: String!) {\n    ccREBiosampleQuery(assay: [$assay], assembly: $assembly) {\n      biosamples {\n        name\n        umap_coordinates(assay: $assay)\n      }\n    }\n  }\n": types.BiosampleUmapDocument,
    "\n  query cCRETF($accession: String!, $assembly: String!) {\n    getcCRETFQuery(accession: $accession, assembly: $assembly) {\n      celltype\n      tf\n    }\n  }\n": types.CCretfDocument,
    "\n  query biosampleZScores($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        id: name  # Add a unique identifier for each biosample\n        sampleType\n        displayname\n        lifeStage\n        cCREZScores(accession: $accession) @nonreactive {  # Mark this field as non-reactive to prevent unnecessary re-renders\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n  }\n": types.BiosampleZScoresDocument,
    "\n  query CtAgnostic($accession: [String!], $assembly: String!) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      id: accession  # Add a unique identifier for the cCRE\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n": types.CtAgnosticDocument,
    "\n  query nearbyGenes(\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n": types.NearbyGenesDocument,
    "\n  query geneOrtholog($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n": types.GeneOrthologDocument,
    "\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }\n": types.GetSnPsforgivengwasStudyDocument,
    "\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n": types.CcreSearchQuery_1Document,
    "\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n": types.Q_4Document,
    "\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n": types.RnaSeqQueryDocument,
    "\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n": types.Biosamples_1Document,
    "\nquery getimmuneeQTLsQuery($genes: [String], $snps: [String],$ccre: [String]) {\n  immuneeQTLsQuery(genes: $genes, snps: $snps, ccre: $ccre) {\n    rsid\n    genename\n    study\n    fdr\n    celltype\n    ref\n    chromosome\n    position\n    alt\n    variant_id    \n    pval_nominal\n    ccre\n    slope\n    spearmans_rho\n  }\n} \n": types.GetimmuneeQtLsQueryDocument,
    "\n  query fetchRNASeqData($assembly: String!, $biosample: [String]) {\n    rnaSeqQuery(assembly: $assembly, biosample: $biosample) {\n      expid\n      biosample\n      posfileid\n      negfileid\n      unstrandedfileid\n    }\n  }\n": types.FetchRnaSeqDataDocument,
    "\n  query cCRE_1(\n    $assembly: String!\n    $accession: [String!]\n    $experiments: [String!]\n  ) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n": types.CCre_1Document,
    "\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n": types.CCre_2Document,
    "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n    \n  }\n}": types.CCreAutocompleteQueryDocument,
    "\n  query cCRESCREENSearchQuery(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $nearbygeneslimit: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      coordinates: $coordinates\n      cellType: $cellType\n      nearbygeneslimit: $nearbygeneslimit\n    ) {\n      chrom\n      start\n      len\n      pct\n      info {\n        accession\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      nearestgenes {\n        gene        \n        distance\n      }\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }  \n    }\n  }\n": types.CCrescreenSearchQueryDocument,
    "\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n": types.BigRequestsDocument,
    "\n   query ccreSearchQuery_2(\n    $assembly: String!    \n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions      \n      nearbygeneslimit: 3\n    ) {\n      \n      nearestgenes {\n        gene        \n        distance\n      }\n    }\n  }\n": types.CcreSearchQuery_2Document,
    "   \nquery geneDataQuery($assembly: String!,$name: [String], $version: Int) {\n    gene(assembly: $assembly, name: $name, version: $version) {\n      name\n      id\n        gene_type\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  }  \n \n": types.GeneDataQueryDocument,
    "\n  query ComputationalGeneLinks($accession: [String]!, $method: [String]){\n    ComputationalGeneLinksQuery(accession: $accession, method: $method){\n      genename\n      accession\n      geneid\n      genetype\n      method\n      celltype\n      score\n      methodregion\n      fileaccession\n    }\n  }\n": types.ComputationalGeneLinksDocument,
    "\n  query GetcCreBiosampleMetadataQuery($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        ontology\n        lifeStage      \n        sampleType\n        displayname\n        __typename\n      }\n      __typename\n    }\n  }": types.GetcCreBiosampleMetadataQueryDocument,
    "\n  query getGWASCTEnrichmentQuery($study: String!) {\n  getGWASCtEnrichmentQuery(study: $study) {\n    celltype\n    accession\n    fc\n    fdr\n    pvalue\n    __typename\n  }\n}": types.GetGwasctEnrichmentQueryDocument,
    "\nquery getimmuneGWASLdr($icres: [String], $snps: [String]) {\n    immuneGWASLdrQuery(snps: $snps, icres: $icres) {\n      snp_chr\n      snp_end\n      snp_start\n      snpid\n      icre\n      ref_allele\n      author\n      effect_allele\n      zscore\n      study_source\n      disease\n      icre_chr\n      icre_start\n      icre_end\n      icre_class\n      study\n      study_link\n    }\n  }": types.GetimmuneGwasLdrDocument,
    "\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }": types.GetSnPsforgivengwasStudyDocument,
    "\n    query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!, $maxOutputLength: Int) {\n      intersection (\n        userCcres: $inp,\n        assembly: $assembly,\n        maxOutputLength: $maxOutputLength\n      )\n    }\n  ": types.BedIntersectCcreDocument,
    "\n    query linkedGenesQuery(\n      $assembly: String!\n      $accessions: [String]!\n      $methods: [String]\n      $celltypes: [String]\n    ) {\n      linkedGenesQuery(\n        assembly: $assembly\n        accession: $accessions\n        method: $methods\n        celltype: $celltypes\n      ) {\n        p_val\n        gene\n        geneid\n        genetype\n        method\n        accession\n        grnaid\n        effectsize\n        assay\n        celltype\n        experiment_accession\n        tissue\n        score\n        variantid\n        source\n        slope\n        tissue\n        displayname\n      }\n    }\n  ": types.LinkedGenesQueryDocument,
    "\n  query getGWASStudies($study: [String]){  \n    getAllGwasStudies(study: $study)  \n    {        \n        study\n        studyname\n        totalldblocks\n        author\n        pubmedid\n    }\n}\n": types.GetGwasStudiesDocument,
    "\n  query Gene($chromosome: String, $start: Int, $end: Int, $name: [String], $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version, name: $name) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        end\n        start\n      }\n        transcripts {\n      coordinates {\n        chromosome\n        end\n        start\n      }\n      id\n      name\n      strand\n    }\n    }\n  }\n": types.GeneDocument,
    "\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n ": types.GeneexpressionDocument,
    "\n  query IcresZscores($accession: [String]!) {\n    immuneiCREsUmapQuery(accession: $accession) {\n      source\n      study\n      link\n      lineage\n      celltype\n      biosample\n      biosampleid\n      celltype_stim\n      stimulation\n      celltype_stim_order\n      biosample_order\n      name\n      expid\n      assay\n      value\n      umap_1\n      umap_2\n      umap_atac_1\n      umap_atac_2\n      umap_dnase_1\n      umap_dnase_2\n      accession\n    }\n  }\n": types.IcresZscoresDocument,
    "\n  query linkedGenes(\n    $assembly: String!  \n    $accessions: [String!]!    \n\n  ) {\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      tissue\n      displayname\n    }\n  }\n": types.LinkedGenesDocument,
    "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession    \n    isiCRE    \n  }\n}": types.CCreAutocompleteQueryDocument,
    "\nquery LinkedcCREs($geneid: [String!]!, $assembly: String!) {\n  linkedcCREs: linkedcCREsQuery(assembly: $assembly, geneid: $geneid) {\n    accession\n    p_val\n    gene\n    geneid\n    genetype\n    method\n    grnaid\n    effectsize\n    assay\n    celltype\n    experiment_accession\n    tissue\n    variantid\n    source\n    slope\n    score\n    displayname\n    __typename\n  }\n}\n  ": types.LinkedcCrEsDocument,
    "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n\n  }\n}": types.CCreAutocompleteQueryDocument,
    "\nquery getclosestGenetocCRE($geneid: [String],$ccre: [String]) {\n  closestGenetocCRE(geneid: $geneid,ccre: $ccre) {\n     gene {\n      chromosome\n      stop\n      start\n      name\n      type\n    }\n    ccre\n    chromosome\n    stop\n    start\n  }\n}\n  ": types.GetclosestGenetocCreDocument,
    "\n    query cCREQuery(\n      $assembly: String!\n      $coordinates: [GenomicRangeInput]\n    ) {\n      cCRESCREENSearch(\n        assembly: $assembly\n        coordinates: $coordinates\n      ) {\n        chrom\n        start\n        len\n        pct\n        info {\n          accession\n        }\n        ctcf_zscore\n        dnase_zscore\n        enhancer_zscore\n        promoter_zscore\n        atac_zscore\n        nearestgenes {\n          gene        \n          distance\n        }\n        ctspecific {\n          ct\n          dnase_zscore\n          h3k4me3_zscore\n          h3k27ac_zscore\n          ctcf_zscore\n          atac_zscore\n        }  \n      }\n    }\n  ": types.CCreQueryDocument,
    "\n  query Snp($snpids: [String], $coordinates: [GenomicRangeInput], $assembly: String!) {\n    snpQuery(assembly: $assembly, snpids: $snpids, coordinates: $coordinates) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n": types.SnpDocument,
    "\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}": types.TssRampageDocument,
};

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 *
 *
 * @example
 * ```ts
 * const query = gql(`query GetUser($id: ID!) { user(id: $id) { name } }`);
 * ```
 *
 * The query argument is unknown!
 * Please regenerate the types.
 */
export function gql(source: string): unknown;

/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n"): (typeof documents)["\nquery ENTEXQuery($accession: String!){\n  entexQuery(accession: $accession){\n    assay\n    accession\n    hap1_count\n    hap2_count\n    hap1_allele_ratio\n    p_betabinom\n    experiment_accession\n    tissue\n    donor    \n    imbalance_significance\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}"): (typeof documents)["\nquery entexActiveAnnotationsQuery( $coordinates: GenomicRangeInput! ) {\n    entexActiveAnnotationsQuery(coordinates: $coordinates) {\n        tissue\n        assay_score\n    }\n\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n"): (typeof documents)["\n  query orthologTab($assembly: String!, $accession: [String!]) {\n    orthologQuery(accession: $accession, assembly: $assembly) {\n      assembly\n      accession\n      ortholog {\n        stop\n        start\n        chromosome\n        accession\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n"): (typeof documents)["\nquery functionalCharacterizationQuery($coordinates: [GenomicRangeInput!],$assembly: String!) {\n  functionalCharacterizationQuery(assembly: $assembly, coordinates: $coordinates) {\n    tissues\n    element_id\n    assay_result\n    chromosome\n    stop\n    start\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n"): (typeof documents)["\nquery MPRA_FCC($coordinates: [GenomicRangeInput!]) {\n  mpraFccQuery(coordinates: $coordinates) {\n    celltype\n    chromosome\n    stop\n    start\n    assay_type\n    element_location\n    series\n    strand\n    log2fc\n    experiment    \n    barcode_location\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query crisprFccQuery($accession: [String]!) {\n    crisprFccQuery(accession: $accession) {\n      rdhs\n      log2fc\n      fdr      \n      pvalue\n      experiment\n    }\n  }\n"): (typeof documents)["\n  query crisprFccQuery($accession: [String]!) {\n    crisprFccQuery(accession: $accession) {\n      rdhs\n      log2fc\n      fdr      \n      pvalue\n      experiment\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"): (typeof documents)["\nquery capraFccSoloQuery($accession: [String]!) {\n  capraFccSoloQuery(accession: $accession) {\n    rdhs\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"): (typeof documents)["\nquery capraFccDoubleQuery($accession: [String]!) {\n  capraFccDoubleQuery(accession: $accession) {\n    rdhs_p1\n    rdhs_p2\n    log2fc\n    fdr\n    dna_rep1\n    rna_rep1\n    rna_rep2\n    rna_rep3\n    pvalue\n    experiment\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n"): (typeof documents)["\nquery rdhs($rDHS: [String!],$assembly: String!) {\n  cCREQuery(assembly: $assembly, rDHS: $rDHS) {\n    accession\n  }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BiosampleUmap($assembly: String!, $assay: String!) {\n    ccREBiosampleQuery(assay: [$assay], assembly: $assembly) {\n      biosamples {\n        name\n        umap_coordinates(assay: $assay)\n      }\n    }\n  }\n"): (typeof documents)["\n  query BiosampleUmap($assembly: String!, $assay: String!) {\n    ccREBiosampleQuery(assay: [$assay], assembly: $assembly) {\n      biosamples {\n        name\n        umap_coordinates(assay: $assay)\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cCRETF($accession: String!, $assembly: String!) {\n    getcCRETFQuery(accession: $accession, assembly: $assembly) {\n      celltype\n      tf\n    }\n  }\n"): (typeof documents)["\n  query cCRETF($accession: String!, $assembly: String!) {\n    getcCRETFQuery(accession: $accession, assembly: $assembly) {\n      celltype\n      tf\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query biosampleZScores($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        id: name  # Add a unique identifier for each biosample\n        sampleType\n        displayname\n        lifeStage\n        cCREZScores(accession: $accession) @nonreactive {  # Mark this field as non-reactive to prevent unnecessary re-renders\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n  }\n"): (typeof documents)["\n  query biosampleZScores($accession: [String!], $assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        id: name  # Add a unique identifier for each biosample\n        sampleType\n        displayname\n        lifeStage\n        cCREZScores(accession: $accession) @nonreactive {  # Mark this field as non-reactive to prevent unnecessary re-renders\n          score\n          assay\n          experiment_accession\n        }\n        name\n        ontology\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query CtAgnostic($accession: [String!], $assembly: String!) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      id: accession  # Add a unique identifier for the cCRE\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n"): (typeof documents)["\n  query CtAgnostic($accession: [String!], $assembly: String!) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      id: accession  # Add a unique identifier for the cCRE\n      accession\n      group\n      dnase: maxZ(assay: \"DNase\")\n      h3k4me3: maxZ(assay: \"H3K4me3\")\n      h3k27ac: maxZ(assay: \"H3K27ac\")\n      ctcf: maxZ(assay: \"CTCF\")\n      atac: maxZ(assay: \"ATAC\")\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query nearbyGenes(\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"): (typeof documents)["\n  query nearbyGenes(\n    $assembly: String!\n    $geneSearchStart: Int!\n    $geneSearchEnd: Int!\n    $geneSearchChrom: String!\n    $geneVersion: Int!\n  ) {\n    nearbyGenes: gene(\n      chromosome: $geneSearchChrom\n      start: $geneSearchStart\n      end: $geneSearchEnd\n      assembly: $assembly\n      version: $geneVersion\n    ) {\n      name\n      id\n      gene_type\n      strand\n      coordinates {\n        chromosome\n        start\n        end\n      }\n      transcripts {\n        id\n        coordinates {\n          chromosome\n          start\n          end\n        }\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query geneOrtholog($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n"): (typeof documents)["\n  query geneOrtholog($name: [String]!, $assembly: String!) {\n    geneOrthologQuery: geneorthologQuery(name: $name, assembly: $assembly) {\n      humanGene: external_gene_name\n      mouseGene: mmusculus_homolog_associated_gene_name\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }\n"): (typeof documents)["\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n"): (typeof documents)["\n  query ccreSearchQuery_1(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $element_type: String\n    $gene_all_start: Int\n    $gene_all_end: Int\n    $gene_pc_start: Int\n    $gene_pc_end: Int\n    $rank_ctcf_end: Float\n    $rank_ctcf_start: Float\n    $rank_dnase_end: Float\n    $rank_dnase_start: Float\n    $rank_enhancer_end: Float\n    $rank_enhancer_start: Float\n    $rank_promoter_end: Float\n    $rank_promoter_start: Float\n    $rank_atac_end: Float\n    $rank_atac_start: Float\n    $mammals_min: Float\n    $mammals_max: Float\n    $vertebrates_min: Float\n    $vertebrates_max: Float\n    $primates_min: Float\n    $primates_max: Float\n    $uuid: String\n    $limit: Int\n    $nearbygeneslimit: Int\n    $nearbygenesdistancethreshold: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      cellType: $cellType\n      coordinates: $coordinates\n      element_type: $element_type\n      gene_all_start: $gene_all_start\n      gene_all_end: $gene_all_end\n      gene_pc_start: $gene_pc_start\n      gene_pc_end: $gene_pc_end\n      rank_atac_end: $rank_atac_end\n      rank_atac_start: $rank_atac_start\n      rank_ctcf_end: $rank_ctcf_end\n      rank_ctcf_start: $rank_ctcf_start\n      rank_dnase_end: $rank_dnase_end\n      rank_dnase_start: $rank_dnase_start\n      rank_enhancer_end: $rank_enhancer_end\n      rank_enhancer_start: $rank_enhancer_start\n      rank_promoter_end: $rank_promoter_end\n      rank_promoter_start: $rank_promoter_start\n      mammals_min: $mammals_min\n      mammals_max: $mammals_max\n      vertebrates_min: $vertebrates_min\n      vertebrates_max: $vertebrates_max\n      primates_min: $primates_min\n      primates_max: $primates_max\n      uuid: $uuid\n      limit: $limit\n      nearbygeneslimit: $nearbygeneslimit\n      nearbygenesdistancethreshold: $nearbygenesdistancethreshold\n    ) {\n      chrom\n      start\n      len\n      pct\n      vertebrates\n      mammals\n      primates\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }\n      info {\n        accession\n        isproximal\n        concordant\n      }\n      nearestgenes {\n        gene\n        distance\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n"): (typeof documents)["\n  query q_4($assembly: String!, $assay: [String!], $a: String!) {\n    ccREBiosampleQuery(assay: $assay, assembly: $assembly) {\n      biosamples {\n        name\n        displayname\n        ontology\n        sampleType\n        lifeStage\n        umap_coordinates(assay: $a)\n        experimentAccession(assay: $a)\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n"): (typeof documents)["\n  query RNASeqQuery($assembly: String!){\n    rnaSeqQuery(assembly:$assembly) {\n      biosample\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n"): (typeof documents)["\n  query biosamples_1($assembly: String!, $assays: [String!]) {\n    ccREBiosampleQuery(assembly: $assembly, assay: $assays) {\n      biosamples {\n        name\n        ontology\n        lifeStage\n        sampleType\n        displayname\n        dnase: experimentAccession(assay: \"DNase\")\n        h3k4me3: experimentAccession(assay: \"H3K4me3\")\n        h3k27ac: experimentAccession(assay: \"H3K27ac\")\n        ctcf: experimentAccession(assay: \"CTCF\")\n        atac: experimentAccession(assay: \"ATAC\")\n        dnase_signal: fileAccession(assay: \"DNase\")\n        h3k4me3_signal: fileAccession(assay: \"H3K4me3\")\n        h3k27ac_signal: fileAccession(assay: \"H3K27ac\")\n        ctcf_signal: fileAccession(assay: \"CTCF\")\n        atac_signal: fileAccession(assay: \"ATAC\")\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getimmuneeQTLsQuery($genes: [String], $snps: [String],$ccre: [String]) {\n  immuneeQTLsQuery(genes: $genes, snps: $snps, ccre: $ccre) {\n    rsid\n    genename\n    study\n    fdr\n    celltype\n    ref\n    chromosome\n    position\n    alt\n    variant_id    \n    pval_nominal\n    ccre\n    slope\n    spearmans_rho\n  }\n} \n"): (typeof documents)["\nquery getimmuneeQTLsQuery($genes: [String], $snps: [String],$ccre: [String]) {\n  immuneeQTLsQuery(genes: $genes, snps: $snps, ccre: $ccre) {\n    rsid\n    genename\n    study\n    fdr\n    celltype\n    ref\n    chromosome\n    position\n    alt\n    variant_id    \n    pval_nominal\n    ccre\n    slope\n    spearmans_rho\n  }\n} \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query fetchRNASeqData($assembly: String!, $biosample: [String]) {\n    rnaSeqQuery(assembly: $assembly, biosample: $biosample) {\n      expid\n      biosample\n      posfileid\n      negfileid\n      unstrandedfileid\n    }\n  }\n"): (typeof documents)["\n  query fetchRNASeqData($assembly: String!, $biosample: [String]) {\n    rnaSeqQuery(assembly: $assembly, biosample: $biosample) {\n      expid\n      biosample\n      posfileid\n      negfileid\n      unstrandedfileid\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cCRE_1(\n    $assembly: String!\n    $accession: [String!]\n    $experiments: [String!]\n  ) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n"): (typeof documents)["\n  query cCRE_1(\n    $assembly: String!\n    $accession: [String!]\n    $experiments: [String!]\n  ) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      zScores(experiments: $experiments) {\n        experiment\n        score\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n"): (typeof documents)["\n  query cCRE_2($assembly: String!, $accession: [String!]) {\n    cCREQuery(assembly: $assembly, accession: $accession) {\n      group\n      dnase: maxZ(assay: \"dnase\")\n      h3k4me3: maxZ(assay: \"h3k4me3\")\n      h3k27ac: maxZ(assay: \"h3k27ac\")\n      ctcf: maxZ(assay: \"ctcf\")\n      atac: maxZ(assay: \"atac\")\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n    \n  }\n}"): (typeof documents)["query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n    \n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query cCRESCREENSearchQuery(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $nearbygeneslimit: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      coordinates: $coordinates\n      cellType: $cellType\n      nearbygeneslimit: $nearbygeneslimit\n    ) {\n      chrom\n      start\n      len\n      pct\n      info {\n        accession\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      nearestgenes {\n        gene        \n        distance\n      }\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }  \n    }\n  }\n"): (typeof documents)["\n  query cCRESCREENSearchQuery(\n    $accessions: [String!]\n    $assembly: String!\n    $cellType: String\n    $coordinates: [GenomicRangeInput]\n    $nearbygeneslimit: Int\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions\n      coordinates: $coordinates\n      cellType: $cellType\n      nearbygeneslimit: $nearbygeneslimit\n    ) {\n      chrom\n      start\n      len\n      pct\n      info {\n        accession\n      }\n      ctcf_zscore\n      dnase_zscore\n      enhancer_zscore\n      promoter_zscore\n      atac_zscore\n      nearestgenes {\n        gene        \n        distance\n      }\n      ctspecific {\n        ct\n        dnase_zscore\n        h3k4me3_zscore\n        h3k27ac_zscore\n        ctcf_zscore\n        atac_zscore\n      }  \n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n"): (typeof documents)["\n  query BigRequests($bigRequests: [BigRequest!]!) {\n    bigRequests(requests: $bigRequests) {\n      data\n      error {\n        errortype\n        message\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n   query ccreSearchQuery_2(\n    $assembly: String!    \n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions      \n      nearbygeneslimit: 3\n    ) {\n      \n      nearestgenes {\n        gene        \n        distance\n      }\n    }\n  }\n"): (typeof documents)["\n   query ccreSearchQuery_2(\n    $assembly: String!    \n    $accessions: [String!]\n  ) {\n    cCRESCREENSearch(\n      assembly: $assembly\n      accessions: $accessions      \n      nearbygeneslimit: 3\n    ) {\n      \n      nearestgenes {\n        gene        \n        distance\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "   \nquery geneDataQuery($assembly: String!,$name: [String], $version: Int) {\n    gene(assembly: $assembly, name: $name, version: $version) {\n      name\n      id\n        gene_type\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  }  \n \n"): (typeof documents)["   \nquery geneDataQuery($assembly: String!,$name: [String], $version: Int) {\n    gene(assembly: $assembly, name: $name, version: $version) {\n      name\n      id\n        gene_type\n      coordinates {\n        start\n        chromosome\n        end\n      }\n    }\n  }  \n \n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query ComputationalGeneLinks($accession: [String]!, $method: [String]){\n    ComputationalGeneLinksQuery(accession: $accession, method: $method){\n      genename\n      accession\n      geneid\n      genetype\n      method\n      celltype\n      score\n      methodregion\n      fileaccession\n    }\n  }\n"): (typeof documents)["\n  query ComputationalGeneLinks($accession: [String]!, $method: [String]){\n    ComputationalGeneLinksQuery(accession: $accession, method: $method){\n      genename\n      accession\n      geneid\n      genetype\n      method\n      celltype\n      score\n      methodregion\n      fileaccession\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query GetcCreBiosampleMetadataQuery($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        ontology\n        lifeStage      \n        sampleType\n        displayname\n        __typename\n      }\n      __typename\n    }\n  }"): (typeof documents)["\n  query GetcCreBiosampleMetadataQuery($assembly: String!) {\n    ccREBiosampleQuery(assembly: $assembly) {\n      biosamples {\n        name\n        ontology\n        lifeStage      \n        sampleType\n        displayname\n        __typename\n      }\n      __typename\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGWASCTEnrichmentQuery($study: String!) {\n  getGWASCtEnrichmentQuery(study: $study) {\n    celltype\n    accession\n    fc\n    fdr\n    pvalue\n    __typename\n  }\n}"): (typeof documents)["\n  query getGWASCTEnrichmentQuery($study: String!) {\n  getGWASCtEnrichmentQuery(study: $study) {\n    celltype\n    accession\n    fc\n    fdr\n    pvalue\n    __typename\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getimmuneGWASLdr($icres: [String], $snps: [String]) {\n    immuneGWASLdrQuery(snps: $snps, icres: $icres) {\n      snp_chr\n      snp_end\n      snp_start\n      snpid\n      icre\n      ref_allele\n      author\n      effect_allele\n      zscore\n      study_source\n      disease\n      icre_chr\n      icre_start\n      icre_end\n      icre_class\n      study\n      study_link\n    }\n  }"): (typeof documents)["\nquery getimmuneGWASLdr($icres: [String], $snps: [String]) {\n    immuneGWASLdrQuery(snps: $snps, icres: $icres) {\n      snp_chr\n      snp_end\n      snp_start\n      snpid\n      icre\n      ref_allele\n      author\n      effect_allele\n      zscore\n      study_source\n      disease\n      icre_chr\n      icre_start\n      icre_end\n      icre_class\n      study\n      study_link\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }"): (typeof documents)["\n  query getSNPsforgivengwasStudy($study: [String!]!) {\n    getSNPsforGWASStudies(study: $study) {\n      snpid\n      ldblock\n      rsquare\n      chromosome\n      stop\n      start\n      ldblocksnpid\n      __typename\n    }\n  }"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!, $maxOutputLength: Int) {\n      intersection (\n        userCcres: $inp,\n        assembly: $assembly,\n        maxOutputLength: $maxOutputLength\n      )\n    }\n  "): (typeof documents)["\n    query bedIntersectCCRE ($inp: [cCRE]!, $assembly: String!, $maxOutputLength: Int) {\n      intersection (\n        userCcres: $inp,\n        assembly: $assembly,\n        maxOutputLength: $maxOutputLength\n      )\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query linkedGenesQuery(\n      $assembly: String!\n      $accessions: [String]!\n      $methods: [String]\n      $celltypes: [String]\n    ) {\n      linkedGenesQuery(\n        assembly: $assembly\n        accession: $accessions\n        method: $methods\n        celltype: $celltypes\n      ) {\n        p_val\n        gene\n        geneid\n        genetype\n        method\n        accession\n        grnaid\n        effectsize\n        assay\n        celltype\n        experiment_accession\n        tissue\n        score\n        variantid\n        source\n        slope\n        tissue\n        displayname\n      }\n    }\n  "): (typeof documents)["\n    query linkedGenesQuery(\n      $assembly: String!\n      $accessions: [String]!\n      $methods: [String]\n      $celltypes: [String]\n    ) {\n      linkedGenesQuery(\n        assembly: $assembly\n        accession: $accessions\n        method: $methods\n        celltype: $celltypes\n      ) {\n        p_val\n        gene\n        geneid\n        genetype\n        method\n        accession\n        grnaid\n        effectsize\n        assay\n        celltype\n        experiment_accession\n        tissue\n        score\n        variantid\n        source\n        slope\n        tissue\n        displayname\n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query getGWASStudies($study: [String]){  \n    getAllGwasStudies(study: $study)  \n    {        \n        study\n        studyname\n        totalldblocks\n        author\n        pubmedid\n    }\n}\n"): (typeof documents)["\n  query getGWASStudies($study: [String]){  \n    getAllGwasStudies(study: $study)  \n    {        \n        study\n        studyname\n        totalldblocks\n        author\n        pubmedid\n    }\n}\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Gene($chromosome: String, $start: Int, $end: Int, $name: [String], $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version, name: $name) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        end\n        start\n      }\n        transcripts {\n      coordinates {\n        chromosome\n        end\n        start\n      }\n      id\n      name\n      strand\n    }\n    }\n  }\n"): (typeof documents)["\n  query Gene($chromosome: String, $start: Int, $end: Int, $name: [String], $assembly: String!, $version: Int) {\n    gene(chromosome: $chromosome, start: $start, end: $end, assembly: $assembly, version: $version, name: $name) {\n      name\n      id\n      strand\n      coordinates {\n        chromosome\n        end\n        start\n      }\n        transcripts {\n      coordinates {\n        chromosome\n        end\n        start\n      }\n      id\n      name\n      strand\n    }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n "): (typeof documents)["\nquery geneexpression($assembly: String!, $gene_id: [String]) {\n  gene_dataset(processed_assembly: $assembly) {\n    biosample\n    tissue\n  \tcell_compartment\n    biosample_type\n  \tassay_term_name\n    accession  \n    gene_quantification_files(assembly: $assembly) {\n      accession\n      biorep\n      quantifications(gene_id_prefix: $gene_id) {\n        tpm\n        file_accession\n      }\n    }\n  }\n}\n "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query IcresZscores($accession: [String]!) {\n    immuneiCREsUmapQuery(accession: $accession) {\n      source\n      study\n      link\n      lineage\n      celltype\n      biosample\n      biosampleid\n      celltype_stim\n      stimulation\n      celltype_stim_order\n      biosample_order\n      name\n      expid\n      assay\n      value\n      umap_1\n      umap_2\n      umap_atac_1\n      umap_atac_2\n      umap_dnase_1\n      umap_dnase_2\n      accession\n    }\n  }\n"): (typeof documents)["\n  query IcresZscores($accession: [String]!) {\n    immuneiCREsUmapQuery(accession: $accession) {\n      source\n      study\n      link\n      lineage\n      celltype\n      biosample\n      biosampleid\n      celltype_stim\n      stimulation\n      celltype_stim_order\n      biosample_order\n      name\n      expid\n      assay\n      value\n      umap_1\n      umap_2\n      umap_atac_1\n      umap_atac_2\n      umap_dnase_1\n      umap_dnase_2\n      accession\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query linkedGenes(\n    $assembly: String!  \n    $accessions: [String!]!    \n\n  ) {\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      tissue\n      displayname\n    }\n  }\n"): (typeof documents)["\n  query linkedGenes(\n    $assembly: String!  \n    $accessions: [String!]!    \n\n  ) {\n    linkedGenes: linkedGenesQuery(assembly: $assembly, accession: $accessions) {\n      accession  \n      p_val\n      gene\n      geneid\n      genetype\n      method\n      grnaid\n      effectsize\n      assay\n      celltype\n      experiment_accession\n      tissue\n      variantid\n      source\n      slope\n      score\n      tissue\n      displayname\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession    \n    isiCRE    \n  }\n}"): (typeof documents)["query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession    \n    isiCRE    \n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery LinkedcCREs($geneid: [String!]!, $assembly: String!) {\n  linkedcCREs: linkedcCREsQuery(assembly: $assembly, geneid: $geneid) {\n    accession\n    p_val\n    gene\n    geneid\n    genetype\n    method\n    grnaid\n    effectsize\n    assay\n    celltype\n    experiment_accession\n    tissue\n    variantid\n    source\n    slope\n    score\n    displayname\n    __typename\n  }\n}\n  "): (typeof documents)["\nquery LinkedcCREs($geneid: [String!]!, $assembly: String!) {\n  linkedcCREs: linkedcCREsQuery(assembly: $assembly, geneid: $geneid) {\n    accession\n    p_val\n    gene\n    geneid\n    genetype\n    method\n    grnaid\n    effectsize\n    assay\n    celltype\n    experiment_accession\n    tissue\n    variantid\n    source\n    slope\n    score\n    displayname\n    __typename\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n\n  }\n}"): (typeof documents)["query cCREAutocompleteQuery(\n  $accession: [String!]\n  $assembly: String!\n  $includeiCREs: Boolean  \n) {\n  cCREAutocompleteQuery(\n    includeiCREs: $includeiCREs\n    assembly: $assembly    \n    accession: $accession\n  ) {    \n    accession\n    isiCRE\n\n  }\n}"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\nquery getclosestGenetocCRE($geneid: [String],$ccre: [String]) {\n  closestGenetocCRE(geneid: $geneid,ccre: $ccre) {\n     gene {\n      chromosome\n      stop\n      start\n      name\n      type\n    }\n    ccre\n    chromosome\n    stop\n    start\n  }\n}\n  "): (typeof documents)["\nquery getclosestGenetocCRE($geneid: [String],$ccre: [String]) {\n  closestGenetocCRE(geneid: $geneid,ccre: $ccre) {\n     gene {\n      chromosome\n      stop\n      start\n      name\n      type\n    }\n    ccre\n    chromosome\n    stop\n    start\n  }\n}\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n    query cCREQuery(\n      $assembly: String!\n      $coordinates: [GenomicRangeInput]\n    ) {\n      cCRESCREENSearch(\n        assembly: $assembly\n        coordinates: $coordinates\n      ) {\n        chrom\n        start\n        len\n        pct\n        info {\n          accession\n        }\n        ctcf_zscore\n        dnase_zscore\n        enhancer_zscore\n        promoter_zscore\n        atac_zscore\n        nearestgenes {\n          gene        \n          distance\n        }\n        ctspecific {\n          ct\n          dnase_zscore\n          h3k4me3_zscore\n          h3k27ac_zscore\n          ctcf_zscore\n          atac_zscore\n        }  \n      }\n    }\n  "): (typeof documents)["\n    query cCREQuery(\n      $assembly: String!\n      $coordinates: [GenomicRangeInput]\n    ) {\n      cCRESCREENSearch(\n        assembly: $assembly\n        coordinates: $coordinates\n      ) {\n        chrom\n        start\n        len\n        pct\n        info {\n          accession\n        }\n        ctcf_zscore\n        dnase_zscore\n        enhancer_zscore\n        promoter_zscore\n        atac_zscore\n        nearestgenes {\n          gene        \n          distance\n        }\n        ctspecific {\n          ct\n          dnase_zscore\n          h3k4me3_zscore\n          h3k27ac_zscore\n          ctcf_zscore\n          atac_zscore\n        }  \n      }\n    }\n  "];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query Snp($snpids: [String], $coordinates: [GenomicRangeInput], $assembly: String!) {\n    snpQuery(assembly: $assembly, snpids: $snpids, coordinates: $coordinates) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"): (typeof documents)["\n  query Snp($snpids: [String], $coordinates: [GenomicRangeInput], $assembly: String!) {\n    snpQuery(assembly: $assembly, snpids: $snpids, coordinates: $coordinates) {\n      id\n      coordinates {\n        chromosome\n        start\n        end\n      }\n    }\n  }\n"];
/**
 * The gql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function gql(source: "\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}"): (typeof documents)["\n  query tssRampage($gene: String!) {\n  tssrampageQuery(genename: $gene) {\n    start    \n    organ   \n    strand\n    peakId\n    biosampleName\n    biosampleType\n    biosampleSummary\n    peakType\n    expAccession\n    value\n    start\n    end \n    chrom    \n    genes {\n      geneName\n        locusType\n    }\n  }\n}"];

export function gql(source: string) {
  return (documents as any)[source] ?? {};
}

export type DocumentType<TDocumentNode extends DocumentNode<any, any>> = TDocumentNode extends DocumentNode<  infer TType,  any>  ? TType  : never;